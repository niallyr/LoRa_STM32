<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\sx1276mb1las\NUCLEO_CUBE_LORA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\sx1276mb1las\NUCLEO_CUBE_LORA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Sep 23 15:09:07 2018
<BR><P>
<H3>Maximum Stack Usage =        800 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
at_AppKey_set &rArr; sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[f7]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f7]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_COMP_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1b]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1c]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[b]">HW_GetBatteryLevel</a> from stm32l0xx_hw.o(i.HW_GetBatteryLevel) referenced 2 times from main.o(.data)
 <LI><a href="#[d]">HW_GetRandomSeed</a> from stm32l0xx_hw.o(i.HW_GetRandomSeed) referenced 2 times from main.o(.data)
 <LI><a href="#[c]">HW_GetUniqueId</a> from stm32l0xx_hw.o(i.HW_GetUniqueId) referenced 2 times from main.o(.data)
 <LI><a href="#[12]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2c]">I2C1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2d]">I2C2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2a]">I2C3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[23]">LPTIM1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[f]">LoraRxData</a> from main.o(i.LoraRxData) referenced 2 times from main.o(.data)
 <LI><a href="#[e]">LoraTxData</a> from main.o(i.LoraTxData) referenced 2 times from main.o(.data)
 <LI><a href="#[43]">McpsConfirm</a> from lora.o(i.McpsConfirm) referenced from lora.o(i.lora_fsm)
 <LI><a href="#[44]">McpsIndication</a> from lora.o(i.McpsIndication) referenced from lora.o(i.lora_fsm)
 <LI><a href="#[45]">MlmeConfirm</a> from lora.o(i.MlmeConfirm) referenced from lora.o(i.lora_fsm)
 <LI><a href="#[11]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[3b]">OnAckTimeoutTimerEvent</a> from loramac.o(i.OnAckTimeoutTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[37]">OnMacStateCheckTimerEvent</a> from loramac.o(i.OnMacStateCheckTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3d]">OnRadioRxDone</a> from loramac.o(i.OnRadioRxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3e]">OnRadioRxError</a> from loramac.o(i.OnRadioRxError) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[40]">OnRadioRxTimeout</a> from loramac.o(i.OnRadioRxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3c]">OnRadioTxDone</a> from loramac.o(i.OnRadioTxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3f]">OnRadioTxTimeout</a> from loramac.o(i.OnRadioTxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[39]">OnRxWindow1TimerEvent</a> from loramac.o(i.OnRxWindow1TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3a]">OnRxWindow2TimerEvent</a> from loramac.o(i.OnRxWindow2TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[38]">OnTxDelayedTimerEvent</a> from loramac.o(i.OnTxDelayedTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[46]">OnTxNextPacketTimerEvent</a> from lora.o(i.OnTxNextPacketTimerEvent) referenced from lora.o(i.lora_fsm)
 <LI><a href="#[17]">PVD_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1a]">RCC_CRS_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[32]">RNG_LPUART1_IRQHandler</a> from stm32l0xx_it.o(i.RNG_LPUART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[18]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[51]">SX1276CheckRfFrequency</a> from sx1276mb1las.o(i.SX1276CheckRfFrequency) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[60]">SX1276GetRadioWakeUpTime</a> from sx1276.o(i.SX1276GetRadioWakeUpTime) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[4a]">SX1276GetStatus</a> from sx1276.o(i.SX1276GetStatus) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[52]">SX1276GetTimeOnAir</a> from sx1276.o(i.SX1276GetTimeOnAir) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[6]">SX1276GetWakeTime</a> from sx1276mb1las.o(i.SX1276GetWakeTime) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[49]">SX1276Init</a> from sx1276.o(i.SX1276Init) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[48]">SX1276IoDeInit</a> from sx1276mb1las.o(i.SX1276IoDeInit) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[47]">SX1276IoInit</a> from sx1276mb1las.o(i.SX1276IoInit) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[7]">SX1276IoIrqInit</a> from sx1276mb1las.o(i.SX1276IoIrqInit) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[4d]">SX1276IsChannelFree</a> from sx1276.o(i.SX1276IsChannelFree) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[0]">SX1276OnDio0Irq</a> from sx1276.o(i.SX1276OnDio0Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[1]">SX1276OnDio1Irq</a> from sx1276.o(i.SX1276OnDio1Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[2]">SX1276OnDio2Irq</a> from sx1276.o(i.SX1276OnDio2Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[3]">SX1276OnDio3Irq</a> from sx1276.o(i.SX1276OnDio3Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[4]">SX1276OnDio4Irq</a> from sx1276.o(i.SX1276OnDio4Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[41]">SX1276OnTimeoutIrq</a> from sx1276.o(i.SX1276OnTimeoutIrq) referenced from sx1276.o(i.SX1276Init)
 <LI><a href="#[4e]">SX1276Random</a> from sx1276.o(i.SX1276Random) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5b]">SX1276Read</a> from sx1276.o(i.SX1276Read) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5d]">SX1276ReadBuffer</a> from sx1276.o(i.SX1276ReadBuffer) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[59]">SX1276ReadRssi</a> from sx1276.o(i.SX1276ReadRssi) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[53]">SX1276Send</a> from sx1276.o(i.SX1276Send) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[a]">SX1276SetAntSw</a> from sx1276mb1las.o(i.SX1276SetAntSw) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[9]">SX1276SetAntSwLowPower</a> from sx1276mb1las.o(i.SX1276SetAntSwLowPower) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[4c]">SX1276SetChannel</a> from sx1276.o(i.SX1276SetChannel) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5e]">SX1276SetMaxPayloadLength</a> from sx1276.o(i.SX1276SetMaxPayloadLength) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[4b]">SX1276SetModem</a> from sx1276.o(i.SX1276SetModem) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5f]">SX1276SetPublicNetwork</a> from sx1276.o(i.SX1276SetPublicNetwork) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[8]">SX1276SetRfTxPower</a> from sx1276mb1las.o(i.SX1276SetRfTxPower) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[56]">SX1276SetRx</a> from sx1276.o(i.SX1276SetRx) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[4f]">SX1276SetRxConfig</a> from sx1276.o(i.SX1276SetRxConfig) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[54]">SX1276SetSleep</a> from sx1276.o(i.SX1276SetSleep) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[55]">SX1276SetStby</a> from sx1276.o(i.SX1276SetStby) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[50]">SX1276SetTxConfig</a> from sx1276.o(i.SX1276SetTxConfig) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[58]">SX1276SetTxContinuousWave</a> from sx1276.o(i.SX1276SetTxContinuousWave) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5]">SX1276SetXO</a> from sx1276mb1las.o(i.SX1276SetXO) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[57]">SX1276StartCad</a> from sx1276.o(i.SX1276StartCad) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5a]">SX1276Write</a> from sx1276.o(i.SX1276Write) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5c]">SX1276WriteBuffer</a> from sx1276.o(i.SX1276WriteBuffer) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[15]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[29]">TIM21_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2b]">TIM22_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[27]">TIM6_DAC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[28]">TIM7_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1e]">TSC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[24]">USART4_5_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[33]">USB_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[36]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[6f]">at_ADR_get</a> from at.o(i.at_ADR_get) referenced from command.o(.constdata)
 <LI><a href="#[70]">at_ADR_set</a> from at.o(i.at_ADR_set) referenced from command.o(.constdata)
 <LI><a href="#[6d]">at_AppEUI_get</a> from at.o(i.at_AppEUI_get) referenced from command.o(.constdata)
 <LI><a href="#[6e]">at_AppEUI_set</a> from at.o(i.at_AppEUI_set) referenced from command.o(.constdata)
 <LI><a href="#[67]">at_AppKey_get</a> from at.o(i.at_AppKey_get) referenced from command.o(.constdata)
 <LI><a href="#[68]">at_AppKey_set</a> from at.o(i.at_AppKey_set) referenced from command.o(.constdata)
 <LI><a href="#[6b]">at_AppSKey_get</a> from at.o(i.at_AppSKey_get) referenced from command.o(.constdata)
 <LI><a href="#[6c]">at_AppSKey_set</a> from at.o(i.at_AppSKey_set) referenced from command.o(.constdata)
 <LI><a href="#[73]">at_DataRate_get</a> from at.o(i.at_DataRate_get) referenced from command.o(.constdata)
 <LI><a href="#[74]">at_DataRate_set</a> from at.o(i.at_DataRate_set) referenced from command.o(.constdata)
 <LI><a href="#[65]">at_DevAddr_get</a> from at.o(i.at_DevAddr_get) referenced from command.o(.constdata)
 <LI><a href="#[66]">at_DevAddr_set</a> from at.o(i.at_DevAddr_set) referenced from command.o(.constdata)
 <LI><a href="#[63]">at_DevEUI_get</a> from at.o(i.at_DevEUI_get) referenced from command.o(.constdata)
 <LI><a href="#[64]">at_DevEUI_set</a> from at.o(i.at_DevEUI_set) referenced from command.o(.constdata)
 <LI><a href="#[8d]">at_DeviceClass_get</a> from at.o(i.at_DeviceClass_get) referenced from command.o(.constdata)
 <LI><a href="#[8e]">at_DeviceClass_set</a> from at.o(i.at_DeviceClass_set) referenced from command.o(.constdata)
 <LI><a href="#[8b]">at_DownlinkCounter_get</a> from at.o(i.at_DownlinkCounter_get) referenced from command.o(.constdata)
 <LI><a href="#[8c]">at_DownlinkCounter_set</a> from at.o(i.at_DownlinkCounter_set) referenced from command.o(.constdata)
 <LI><a href="#[75]">at_DutyCycle_get</a> from at.o(i.at_DutyCycle_get) referenced from command.o(.constdata)
 <LI><a href="#[76]">at_DutyCycle_set</a> from at.o(i.at_DutyCycle_set) referenced from command.o(.constdata)
 <LI><a href="#[8f]">at_Join</a> from at.o(i.at_Join) referenced from command.o(.constdata)
 <LI><a href="#[81]">at_JoinAcceptDelay1_get</a> from at.o(i.at_JoinAcceptDelay1_get) referenced from command.o(.constdata)
 <LI><a href="#[82]">at_JoinAcceptDelay1_set</a> from at.o(i.at_JoinAcceptDelay1_set) referenced from command.o(.constdata)
 <LI><a href="#[83]">at_JoinAcceptDelay2_get</a> from at.o(i.at_JoinAcceptDelay2_get) referenced from command.o(.constdata)
 <LI><a href="#[84]">at_JoinAcceptDelay2_set</a> from at.o(i.at_JoinAcceptDelay2_set) referenced from command.o(.constdata)
 <LI><a href="#[87]">at_NetworkID_get</a> from at.o(i.at_NetworkID_get) referenced from command.o(.constdata)
 <LI><a href="#[88]">at_NetworkID_set</a> from at.o(i.at_NetworkID_set) referenced from command.o(.constdata)
 <LI><a href="#[85]">at_NetworkJoinMode_get</a> from at.o(i.at_NetworkJoinMode_get) referenced from command.o(.constdata)
 <LI><a href="#[86]">at_NetworkJoinMode_set</a> from at.o(i.at_NetworkJoinMode_set) referenced from command.o(.constdata)
 <LI><a href="#[90]">at_NetworkJoinStatus</a> from at.o(i.at_NetworkJoinStatus) referenced from command.o(.constdata)
 <LI><a href="#[69]">at_NwkSKey_get</a> from at.o(i.at_NwkSKey_get) referenced from command.o(.constdata)
 <LI><a href="#[6a]">at_NwkSKey_set</a> from at.o(i.at_NwkSKey_set) referenced from command.o(.constdata)
 <LI><a href="#[77]">at_PublicNetwork_get</a> from at.o(i.at_PublicNetwork_get) referenced from command.o(.constdata)
 <LI><a href="#[78]">at_PublicNetwork_set</a> from at.o(i.at_PublicNetwork_set) referenced from command.o(.constdata)
 <LI><a href="#[94]">at_Receive</a> from at.o(i.at_Receive) referenced 2 times from command.o(.constdata)
 <LI><a href="#[93]">at_ReceiveBinary</a> from at.o(i.at_ReceiveBinary) referenced 2 times from command.o(.constdata)
 <LI><a href="#[7d]">at_Rx1Delay_get</a> from at.o(i.at_Rx1Delay_get) referenced from command.o(.constdata)
 <LI><a href="#[7e]">at_Rx1Delay_set</a> from at.o(i.at_Rx1Delay_set) referenced from command.o(.constdata)
 <LI><a href="#[7b]">at_Rx2DataRate_get</a> from at.o(i.at_Rx2DataRate_get) referenced from command.o(.constdata)
 <LI><a href="#[7c]">at_Rx2DataRate_set</a> from at.o(i.at_Rx2DataRate_set) referenced from command.o(.constdata)
 <LI><a href="#[7f]">at_Rx2Delay_get</a> from at.o(i.at_Rx2Delay_get) referenced from command.o(.constdata)
 <LI><a href="#[80]">at_Rx2Delay_set</a> from at.o(i.at_Rx2Delay_set) referenced from command.o(.constdata)
 <LI><a href="#[79]">at_Rx2Frequency_get</a> from at.o(i.at_Rx2Frequency_get) referenced from command.o(.constdata)
 <LI><a href="#[7a]">at_Rx2Frequency_set</a> from at.o(i.at_Rx2Frequency_set) referenced from command.o(.constdata)
 <LI><a href="#[92]">at_Send</a> from at.o(i.at_Send) referenced from command.o(.constdata)
 <LI><a href="#[91]">at_SendBinary</a> from at.o(i.at_SendBinary) referenced from command.o(.constdata)
 <LI><a href="#[9b]">at_TDC_get</a> from at.o(i.at_TDC_get) referenced from command.o(.constdata)
 <LI><a href="#[9c]">at_TDC_set</a> from at.o(i.at_TDC_set) referenced from command.o(.constdata)
 <LI><a href="#[71]">at_TransmitPower_get</a> from at.o(i.at_TransmitPower_get) referenced from command.o(.constdata)
 <LI><a href="#[72]">at_TransmitPower_set</a> from at.o(i.at_TransmitPower_set) referenced from command.o(.constdata)
 <LI><a href="#[89]">at_UplinkCounter_get</a> from at.o(i.at_UplinkCounter_get) referenced from command.o(.constdata)
 <LI><a href="#[8a]">at_UplinkCounter_set</a> from at.o(i.at_UplinkCounter_set) referenced from command.o(.constdata)
 <LI><a href="#[96]">at_ack_get</a> from at.o(i.at_ack_get) referenced from command.o(.constdata)
 <LI><a href="#[97]">at_ack_set</a> from at.o(i.at_ack_set) referenced from command.o(.constdata)
 <LI><a href="#[98]">at_isack_get</a> from at.o(i.at_isack_get) referenced from command.o(.constdata)
 <LI><a href="#[62]">at_reset</a> from at.o(i.at_reset) referenced from command.o(.constdata)
 <LI><a href="#[61]">at_return_error</a> from at.o(i.at_return_error) referenced 44 times from command.o(.constdata)
 <LI><a href="#[9a]">at_rssi_get</a> from at.o(i.at_rssi_get) referenced from command.o(.constdata)
 <LI><a href="#[99]">at_snr_get</a> from at.o(i.at_snr_get) referenced from command.o(.constdata)
 <LI><a href="#[95]">at_version_get</a> from at.o(i.at_version_get) referenced from command.o(.constdata)
 <LI><a href="#[42]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[34]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[202]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[be]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[203]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[204]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[205]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[206]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[207]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[208]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AlternateDr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTxData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
</UL>

<P><STRONG><a name="[20a]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INPUT_IoInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IoInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1ec]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
</UL>

<P><STRONG><a name="[1fb]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[210]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTxData
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[eb]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[212]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTxData
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[213]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[214]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[215]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[a9]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[b0]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[af]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bc]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[218]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>AES_CMAC_Final</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[c6]"></a>AES_CMAC_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AES_CMAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[c7]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[c9]"></a>AES_CMAC_Update</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[cc]"></a>BSP_oil_float_Init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, oil_float.o(i.BSP_oil_float_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_oil_float_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[d0]"></a>BSP_sensor_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(i.BSP_sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_sensor_Init &rArr; GPIO_INPUT_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INPUT_IoInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IoInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[d3]"></a>BSP_sensor_Read</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bsp.o(i.BSP_sensor_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_sensor_Read &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTxData
</UL>

<P><STRONG><a name="[d7]"></a>CMD_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, command.o(i.CMD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CMD_Init &rArr; vcom_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>CMD_Process</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, command.o(i.CMD_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = CMD_Process &rArr; parse_cmd &rArr; com_error &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewChar
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNewCharReceived
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>DBG_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, debug.o(i.DBG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DBG_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStopMode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStandbyMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGSleepMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>DS18B20_GetTemp_SkipRom</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_GetTemp_SkipRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DS18B20_GetTemp_SkipRom &rArr; DS18B20_SkipRom &rArr; DS18B20_WriteByte &rArr; DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SkipRom
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadByte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[ec]"></a>DS18B20_IoDeInit</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ds18b20.o(i.DS18B20_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnterStopMode
</UL>

<P><STRONG><a name="[ed]"></a>DS18B20_Mode_IPU</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ds18b20.o(i.DS18B20_Mode_IPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_Mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
</UL>

<P><STRONG><a name="[ee]"></a>DS18B20_Mode_Out_PP</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ds18b20.o(i.DS18B20_Mode_Out_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>

<P><STRONG><a name="[ef]"></a>DS18B20_Presence</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Presence))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DS18B20_Presence &rArr; DS18B20_Mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_IPU
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SkipRom
</UL>

<P><STRONG><a name="[f1]"></a>DS18B20_ReadBit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_ReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS18B20_ReadBit &rArr; DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_IPU
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadByte
</UL>

<P><STRONG><a name="[ea]"></a>DS18B20_ReadByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DS18B20_ReadByte &rArr; DS18B20_ReadBit &rArr; DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[f2]"></a>DS18B20_Rst</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS18B20_Rst &rArr; DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SkipRom
</UL>

<P><STRONG><a name="[e8]"></a>DS18B20_SkipRom</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_SkipRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DS18B20_SkipRom &rArr; DS18B20_WriteByte &rArr; DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[e9]"></a>DS18B20_WriteByte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DS18B20_WriteByte &rArr; DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SkipRom
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[f0]"></a>DS18B20_delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds18b20.o(i.DS18B20_delay))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
</UL>

<P><STRONG><a name="[f3]"></a>DelayMs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[1b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_EXTI_IoInit</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gpio_exti.o(i.GPIO_EXTI_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_EXTI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[d2]"></a>GPIO_INPUT_IoInit</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, gpio_exti.o(i.GPIO_INPUT_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_INPUT_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[db]"></a>GetNewChar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vcom.o(i.GetNewChar))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[fb]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32l0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[fc]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[12d]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[fd]"></a>HAL_ADC_Init</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcInit
</UL>

<P><STRONG><a name="[fe]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[100]"></a>HAL_ADC_Start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[e5]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_GPIO_Init</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_IPU
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IoDeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[cf]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[c1]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[102]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[104]"></a>HAL_MspInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IoInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[150]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_GetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_setMcuWakeUpTime
</UL>

<P><STRONG><a name="[f9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IoInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[107]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[106]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[105]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[12f]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnterSleepMode
</UL>

<P><STRONG><a name="[132]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnterStopMode
</UL>

<P><STRONG><a name="[109]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1116 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[149]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[111]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; HW_RTC_GetTimerContext &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarmConfig
</UL>

<P><STRONG><a name="[114]"></a>HAL_RTC_GetAlarm</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_setMcuWakeUpTime
</UL>

<P><STRONG><a name="[116]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[117]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[118]"></a>HAL_RTC_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[119]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[11d]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[11f]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[11e]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[120]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>

<P><STRONG><a name="[201]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_StopModeWakeUpSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_UART_MspInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vcom.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; vcom_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12c]"></a>HW_AdcInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_AdcInit &rArr; HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[d5]"></a>HW_AdcReadChannel</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32l0xx_hw.o(i.HW_AdcReadChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[12e]"></a>HW_EnterSleepMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_EnterSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Handler
</UL>

<P><STRONG><a name="[130]"></a>HW_EnterStopMode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HW_EnterStopMode &rArr; HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IoDeInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Handler
</UL>

<P><STRONG><a name="[133]"></a>HW_ExitStopMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_ExitStopMode &rArr; HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Handler
</UL>

<P><STRONG><a name="[f8]"></a>HW_GPIO_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INPUT_IoInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IoInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
</UL>

<P><STRONG><a name="[101]"></a>HW_GPIO_IrqHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[136]"></a>HW_GPIO_SetIrq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_SetIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_GetIRQn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[138]"></a>HW_GPIO_Write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
</UL>

<P><STRONG><a name="[b]"></a>HW_GetBatteryLevel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l0xx_hw.o(i.HW_GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HW_GetBatteryLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HW_GetRandomSeed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hw.o(i.HW_GetRandomSeed))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HW_GetUniqueId</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l0xx_hw.o(i.HW_GetUniqueId))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[139]"></a>HW_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HW_Init &rArr; HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>HW_RTC_DelayMs</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[1ca]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[13e]"></a>HW_RTC_GetTimerContext</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_GetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HW_RTC_GetTimerContext &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[142]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[13c]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>

<P><STRONG><a name="[13b]"></a>HW_RTC_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[143]"></a>HW_RTC_IrqHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; HW_RTC_GetTimerContext &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_GetState
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Disable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[141]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
</UL>

<P><STRONG><a name="[14b]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[14c]"></a>HW_RTC_Tick2ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Tick2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_Tick2ms &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[14e]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[14f]"></a>HW_RTC_setMcuWakeUpTime</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, hw_rtc.o(i.HW_RTC_setMcuWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_RTC_setMcuWakeUpTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPendingIRQ
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Handler
</UL>

<P><STRONG><a name="[151]"></a>HW_SPI_InOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hw_spi.o(i.HW_SPI_InOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[13a]"></a>HW_SPI_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hw_spi.o(i.HW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_SPI_Init &rArr; HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[131]"></a>HW_SPI_IoDeInit</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, hw_spi.o(i.HW_SPI_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnterStopMode
</UL>

<P><STRONG><a name="[134]"></a>HW_SPI_IoInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hw_spi.o(i.HW_SPI_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ExitStopMode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>IsNewCharReceived</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vcom.o(i.IsNewCharReceived))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>LoRaMacComputeMic</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LoRaMacComputeMic &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[154]"></a>LoRaMacInitialization</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LoRaMacInitialization &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
</UL>

<P><STRONG><a name="[15d]"></a>LoRaMacJoinComputeMic</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LoRaMacJoinComputeMic &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[15e]"></a>LoRaMacJoinComputeSKeys</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, loramaccrypto.o(i.LoRaMacJoinComputeSKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LoRaMacJoinComputeSKeys &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[15f]"></a>LoRaMacJoinDecrypt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoRaMacJoinDecrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[160]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[163]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSendEvent
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_get
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_get
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_get
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinStatus
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_get
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_get
</UL>

<P><STRONG><a name="[164]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, loramac.o(i.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; RegionComputeRxWindowParameters &rArr; RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_set
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_set
</UL>

<P><STRONG><a name="[169]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, loramac.o(i.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[16d]"></a>LoRaMacPayloadDecrypt</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, loramaccrypto.o(i.LoRaMacPayloadDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[16e]"></a>LoRaMacPayloadEncrypt</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacPayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[16f]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, loramac.o(i.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LoRaMacQueryTxPossible &rArr; RegionAdrNext &rArr; RegionEU868AdrNext &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[172]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionEU868Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_set
</UL>

<P><STRONG><a name="[146]"></a>LowPower_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, low_power.o(i.LowPower_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[144]"></a>LowPower_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, low_power.o(i.LowPower_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[147]"></a>LowPower_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_power.o(i.LowPower_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[176]"></a>LowPower_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, low_power.o(i.LowPower_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LowPower_Handler &rArr; HW_EnterStopMode &rArr; HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ExitStopMode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnterStopMode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnterSleepMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_setMcuWakeUpTime
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>MSP_GetIRQn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.MSP_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>

<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[180]"></a>OnSendEvent</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lora.o(i.OnSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = OnSendEvent &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_exti
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>PrepareFrame</STRONG> (Thumb, 620 bytes, Stack size 48 bytes, loramac.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PrepareFrame &rArr; LoRaMacJoinComputeMic &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacCommandsToRepeat
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[32]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RNG_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = RNG_LPUART1_IRQHandler &rArr; vcom_IRQHandler &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
</UL>

<P><STRONG><a name="[11c]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[11a]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[18]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RTC_IRQHandler &rArr; HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; HW_RTC_GetTimerContext &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>RegionAdrNext</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, region.o(i.RegionAdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RegionAdrNext &rArr; RegionEU868AdrNext &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AdrNext
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[16a]"></a>RegionAlternateDr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionAlternateDr &rArr; RegionEU868AlternateDr &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[17d]"></a>RegionApplyCFList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RegionApplyCFList &rArr; RegionEU868ApplyCFList &rArr; RegionEU868ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[18d]"></a>RegionApplyDrOffset</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[e1]"></a>RegionCalcBackOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionCalcBackOff &rArr; RegionEU868CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868CalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[168]"></a>RegionChanMaskSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionChanMaskSet &rArr; RegionEU868ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[191]"></a>RegionCommonCalcBackOff</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, regioncommon.o(i.RegionCommonCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetJoinDc
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868CalcBackOff
</UL>

<P><STRONG><a name="[1a4]"></a>RegionCommonChanDisable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
</UL>

<P><STRONG><a name="[1a2]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, regioncommon.o(i.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
</UL>

<P><STRONG><a name="[193]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, regioncommon.o(i.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[194]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, regioncommon.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[196]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCommonComputeSymbolTimeFsk &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[197]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[198]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
</UL>

<P><STRONG><a name="[1ac]"></a>RegionCommonCountChannels</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, regioncommon.o(i.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[192]"></a>RegionCommonGetJoinDc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonGetJoinDc))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>

<P><STRONG><a name="[19b]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, regioncommon.o(i.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>

<P><STRONG><a name="[1a9]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonParseLinkAdrReq))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>

<P><STRONG><a name="[1af]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonSetBandTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
</UL>

<P><STRONG><a name="[19c]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[e3]"></a>RegionCommonValueInRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>

<P><STRONG><a name="[165]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[188]"></a>RegionDlChannelReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionDlChannelReq &rArr; RegionEU868DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[18a]"></a>RegionEU868AdrNext</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, regioneu868.o(i.RegionEU868AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RegionEU868AdrNext &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[18b]"></a>RegionEU868AlternateDr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionEU868AlternateDr &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[18c]"></a>RegionEU868ApplyCFList</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, regioneu868.o(i.RegionEU868ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionEU868ApplyCFList &rArr; RegionEU868ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[18e]"></a>RegionEU868ApplyDrOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[18f]"></a>RegionEU868CalcBackOff</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionEU868CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[190]"></a>RegionEU868ChanMaskSet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionEU868ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[1a0]"></a>RegionEU868ChannelAdd</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[1a1]"></a>RegionEU868ChannelsRemove</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[19d]"></a>RegionEU868ComputeRxWindowParameters</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, regioneu868.o(i.RegionEU868ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[19e]"></a>RegionEU868DlChannelReq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[19f]"></a>RegionEU868GetPhyParam</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AdrNext
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[1a7]"></a>RegionEU868InitDefaults</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[1a8]"></a>RegionEU868LinkAdrReq</STRONG> (Thumb, 270 bytes, Stack size 96 bytes, regioneu868.o(i.RegionEU868LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[1aa]"></a>RegionEU868NewChannelReq</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU868NewChannelReq &rArr; RegionEU868ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[1ab]"></a>RegionEU868NextChannel</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, regioneu868.o(i.RegionEU868NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionEU868NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[1b5]"></a>RegionEU868RxConfig</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, regioneu868.o(i.RegionEU868RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionEU868RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[1ad]"></a>RegionEU868RxParamSetupReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[1ae]"></a>RegionEU868SetBandTxDone</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[1b0]"></a>RegionEU868SetContinuousWave</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[1b1]"></a>RegionEU868TxConfig</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, regioneu868.o(i.RegionEU868TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[1b8]"></a>RegionEU868TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[1b3]"></a>RegionEU868Verify</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[156]"></a>RegionGetPhyParam</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, region.o(i.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[157]"></a>RegionInitDefaults</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[155]"></a>RegionIsActive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, region.o(i.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[184]"></a>RegionLinkAdrReq</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, region.o(i.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = RegionLinkAdrReq &rArr; RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[186]"></a>RegionNewChannelReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionNewChannelReq &rArr; RegionEU868NewChannelReq &rArr; RegionEU868ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1b4]"></a>RegionNextChannel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, region.o(i.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RegionNextChannel &rArr; RegionEU868NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[166]"></a>RegionRxConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(i.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionRxConfig &rArr; RegionEU868RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[185]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionEU868RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[17f]"></a>RegionSetBandTxDone</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionSetBandTxDone &rArr; RegionEU868SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[1b6]"></a>RegionSetContinuousWave</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionSetContinuousWave &rArr; RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
</UL>

<P><STRONG><a name="[1b7]"></a>RegionTxConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[187]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionTxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[161]"></a>RegionVerify</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(i.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionVerify &rArr; RegionEU868Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1be]"></a>SX1276BoardInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276BoardInit))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
</UL>

<P><STRONG><a name="[51]"></a>SX1276CheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1las.o(i.SX1276CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>SX1276GetPaSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276mb1las.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>

<P><STRONG><a name="[60]"></a>SX1276GetRadioWakeUpTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276GetRadioWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetRadioWakeUpTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>SX1276GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 444 bytes, Stack size 72 bytes, sx1276.o(i.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276GetTimeOnAir &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[6]"></a>SX1276GetWakeTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1las.o(i.SX1276GetWakeTime))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>SX1276Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>SX1276IoDeInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, sx1276mb1las.o(i.SX1276IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>SX1276IoInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sx1276mb1las.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276BoardInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[7]"></a>SX1276IoIrqInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276mb1las.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276IoIrqInit &rArr; HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>SX1276IsChannelFree</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, sx1276.o(i.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 594 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SX1276OnDio0Irq &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SX1276OnDio1Irq &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276OnDio2Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sx1276.o(i.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(i.SX1276Init)
</UL>
<P><STRONG><a name="[4e]"></a>SX1276Random</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>SX1276Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>SX1276ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>SX1276ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[59]"></a>SX1276ReadRssi</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sx1276.o(i.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>SX1276Reset</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sx1276.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SX1276Reset &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[53]"></a>SX1276Send</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>SX1276SetAntSw</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276mb1las.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276SetAntSw &rArr; HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, sx1276mb1las.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276SetAntSwLowPower &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>SX1276SetChannel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>SX1276SetModem</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>SX1276SetOpMode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[5f]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sx1276mb1las.o(i.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>SX1276SetRx</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, sx1276.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276SetRx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>SX1276SetRxConfig</STRONG> (Thumb, 628 bytes, Stack size 64 bytes, sx1276.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>SX1276SetSleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>SX1276SetStby</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276SetStby &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>SX1276SetTx</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetTx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[50]"></a>SX1276SetTxConfig</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, sx1276.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, sx1276.o(i.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5]"></a>SX1276SetXO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276mb1las.o(i.SX1276SetXO))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>SX1276StartCad</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>SX1276Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>SX1276WriteBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>SX1276WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[162]"></a>Send</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, loramac.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1c4]"></a>SendFrameOnChannel</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, loramac.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[16b]"></a>SetTxContinuousWave</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, loramac.o(i.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SetTxContinuousWave &rArr; RegionSetContinuousWave &rArr; RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[16c]"></a>SetTxContinuousWave1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, loramac.o(i.SetTxContinuousWave1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetTxContinuousWave1 &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>SystemClock_Config</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, stm32l0xx_hw.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>TimerGetCurrentTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timeserver.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TimerGetCurrentTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[e0]"></a>TimerGetElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timeserver.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[159]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timeserver.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[112]"></a>TimerIrqHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, timeserver.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TimerIrqHandler &rArr; HW_RTC_GetTimerContext &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[15a]"></a>TimerSetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[17b]"></a>TimerStart</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, timeserver.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[179]"></a>TimerStop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timeserver.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
</UL>

<P><STRONG><a name="[128]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12a]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[129]"></a>UART_SetConfig</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[125]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[1cb]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21d]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[200]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[21f]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bb]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[14d]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hw_rtc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
</UL>

<P><STRONG><a name="[cb]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1276.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacCommandsToRepeat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>

<P><STRONG><a name="[220]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[221]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[222]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c4]"></a>aes_encrypt</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[c8]"></a>aes_set_key</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[6f]"></a>at_ADR_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at.o(i.at_ADR_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_ADR_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>at_ADR_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at.o(i.at_ADR_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = at_ADR_set &rArr; LoRaMacMibSetRequestConfirm &rArr; RegionComputeRxWindowParameters &rArr; RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>at_AppEUI_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_AppEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = at_AppEUI_get &rArr; print_8_02x &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>at_AppEUI_set</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, at.o(i.at_AppEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = at_AppEUI_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>at_AppKey_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_AppKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = at_AppKey_get &rArr; print_16_02x &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>at_AppKey_set</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at.o(i.at_AppKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = at_AppKey_set &rArr; sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>at_AppSKey_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_AppSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = at_AppSKey_get &rArr; print_16_02x &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>at_AppSKey_set</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at.o(i.at_AppSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = at_AppSKey_set &rArr; sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>at_DataRate_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_DataRate_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>at_DataRate_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_DataRate_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>at_DevAddr_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at.o(i.at_DevAddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_DevAddr_get &rArr; lora_config_devaddr_get &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>at_DevAddr_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at.o(i.at_DevAddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = at_DevAddr_set &rArr; sscanf_uint32_as_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>at_DevEUI_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_DevEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = at_DevEUI_get &rArr; print_8_02x &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>at_DevEUI_set</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, at.o(i.at_DevEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = at_DevEUI_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>at_DeviceClass_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, at.o(i.at_DeviceClass_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_DeviceClass_get &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>at_DeviceClass_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at.o(i.at_DeviceClass_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = at_DeviceClass_set &rArr; LoRaMacMibSetRequestConfirm &rArr; RegionComputeRxWindowParameters &rArr; RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>at_DownlinkCounter_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_DownlinkCounter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_DownlinkCounter_get &rArr; print_u &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>at_DownlinkCounter_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_DownlinkCounter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_DownlinkCounter_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>at_DutyCycle_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at.o(i.at_DutyCycle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = at_DutyCycle_get &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>at_DutyCycle_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_DutyCycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_DutyCycle_set &rArr; lora_config_duty_cycle_set &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionEU868Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>at_Join</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, at.o(i.at_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = at_Join &rArr; lora_join &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>at_JoinAcceptDelay1_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_JoinAcceptDelay1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_JoinAcceptDelay1_get &rArr; print_u &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>at_JoinAcceptDelay1_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_JoinAcceptDelay1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_JoinAcceptDelay1_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>at_JoinAcceptDelay2_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_JoinAcceptDelay2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_JoinAcceptDelay2_get &rArr; print_u &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>at_JoinAcceptDelay2_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_JoinAcceptDelay2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_JoinAcceptDelay2_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>at_NetworkID_get</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, at.o(i.at_NetworkID_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_NetworkID_get &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>at_NetworkID_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at.o(i.at_NetworkID_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = at_NetworkID_set &rArr; sscanf_uint32_as_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>at_NetworkJoinMode_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at.o(i.at_NetworkJoinMode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_NetworkJoinMode_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>at_NetworkJoinMode_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_NetworkJoinMode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_NetworkJoinMode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>at_NetworkJoinStatus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at.o(i.at_NetworkJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_NetworkJoinStatus &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>at_NwkSKey_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_NwkSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = at_NwkSKey_get &rArr; print_16_02x &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>at_NwkSKey_set</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at.o(i.at_NwkSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = at_NwkSKey_set &rArr; sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>at_PublicNetwork_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at.o(i.at_PublicNetwork_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_PublicNetwork_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>at_PublicNetwork_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at.o(i.at_PublicNetwork_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = at_PublicNetwork_set &rArr; LoRaMacMibSetRequestConfirm &rArr; RegionComputeRxWindowParameters &rArr; RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>at_Receive</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at.o(i.at_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = at_Receive &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>at_ReceiveBinary</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at.o(i.at_ReceiveBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_ReceiveBinary &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>at_Rx1Delay_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_Rx1Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_Rx1Delay_get &rArr; print_u &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>at_Rx1Delay_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_Rx1Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_Rx1Delay_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>at_Rx2DataRate_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at.o(i.at_Rx2DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_Rx2DataRate_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>at_Rx2DataRate_set</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, at.o(i.at_Rx2DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = at_Rx2DataRate_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>at_Rx2Delay_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_Rx2Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_Rx2Delay_get &rArr; print_u &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>at_Rx2Delay_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_Rx2Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_Rx2Delay_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>at_Rx2Frequency_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_Rx2Frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_Rx2Frequency_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>at_Rx2Frequency_set</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, at.o(i.at_Rx2Frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = at_Rx2Frequency_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>at_Send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at.o(i.at_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = at_Send &rArr; lora_send &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>at_SendBinary</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at.o(i.at_SendBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = at_SendBinary &rArr; lora_send &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>at_TDC_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at.o(i.at_TDC_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_TDC_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>at_TDC_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at.o(i.at_TDC_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_TDC_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>at_TransmitPower_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_TransmitPower_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_TransmitPower_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>at_TransmitPower_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_TransmitPower_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_TransmitPower_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>at_UplinkCounter_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_UplinkCounter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_UplinkCounter_get &rArr; print_u &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>at_UplinkCounter_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_UplinkCounter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_UplinkCounter_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>at_ack_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at.o(i.at_ack_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_ack_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>at_ack_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_ack_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_ack_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>at_isack_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at.o(i.at_isack_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_isack_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_isack_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>at_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at.o(i.at_reset))
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>at_return_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at.o(i.at_return_error))
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>at_rssi_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_rssi_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_rssi_get &rArr; print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_rssi_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>at_snr_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_snr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at_snr_get &rArr; print_u &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_snr_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>at_version_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, at.o(i.at_version_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = at_version_get &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[19a]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[42]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1f4]"></a>lora_Init</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lora.o(i.lora_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lora_Init &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>lora_config_appeui_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_appeui_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_get
</UL>

<P><STRONG><a name="[1d9]"></a>lora_config_appeui_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_appeui_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_appeui_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_set
</UL>

<P><STRONG><a name="[1da]"></a>lora_config_appkey_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_appkey_get))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_get
</UL>

<P><STRONG><a name="[1dd]"></a>lora_config_appkey_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_appkey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_appkey_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_set
</UL>

<P><STRONG><a name="[1de]"></a>lora_config_appskey_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_appskey_get))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_get
</UL>

<P><STRONG><a name="[1df]"></a>lora_config_appskey_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_appskey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_appskey_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_set
</UL>

<P><STRONG><a name="[1e0]"></a>lora_config_devaddr_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_devaddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lora_config_devaddr_get &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_get
</UL>

<P><STRONG><a name="[1e2]"></a>lora_config_devaddr_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_devaddr_set))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_set
</UL>

<P><STRONG><a name="[1e3]"></a>lora_config_deveui_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_deveui_get))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_get
</UL>

<P><STRONG><a name="[1e4]"></a>lora_config_deveui_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_deveui_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_deveui_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_set
</UL>

<P><STRONG><a name="[1e6]"></a>lora_config_duty_cycle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_duty_cycle_get))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_get
</UL>

<P><STRONG><a name="[178]"></a>lora_config_duty_cycle_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lora.o(i.lora_config_duty_cycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lora_config_duty_cycle_set &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionEU868Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_set
</UL>

<P><STRONG><a name="[1f0]"></a>lora_config_isack_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lora.o(i.lora_config_isack_get))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_isack_get
</UL>

<P><STRONG><a name="[1ea]"></a>lora_config_nwkskey_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_nwkskey_get))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_get
</UL>

<P><STRONG><a name="[1eb]"></a>lora_config_nwkskey_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_nwkskey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_nwkskey_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_set
</UL>

<P><STRONG><a name="[1e8]"></a>lora_config_otaa_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_otaa_get))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_get
</UL>

<P><STRONG><a name="[1e9]"></a>lora_config_otaa_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_otaa_set))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_set
</UL>

<P><STRONG><a name="[1ee]"></a>lora_config_reqack_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_reqack_get))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_get
</UL>

<P><STRONG><a name="[1ef]"></a>lora_config_reqack_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_reqack_set))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_set
</UL>

<P><STRONG><a name="[1f1]"></a>lora_config_rssi_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.lora_config_rssi_get))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rssi_get
</UL>

<P><STRONG><a name="[1f2]"></a>lora_config_snr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.lora_config_snr_get))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_snr_get
</UL>

<P><STRONG><a name="[1f5]"></a>lora_fsm</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, lora.o(i.lora_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = lora_fsm &rArr; SendFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f9]"></a>lora_getDeviceState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_getDeviceState))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>lora_join</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lora.o(i.lora_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lora_join &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Join
</UL>

<P><STRONG><a name="[1ed]"></a>lora_send</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lora.o(i.lora_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = lora_send &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSendEvent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
</UL>

<P><STRONG><a name="[1f7]"></a>lora_send_exti</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lora.o(i.lora_send_exti))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = lora_send_exti &rArr; SendFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSendEvent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_exti
</UL>

<P><STRONG><a name="[34]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = main &rArr; lora_fsm &rArr; SendFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_getDeviceState
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNewCharReceived
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_exti
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c5]"></a>memcpy1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utilities.o(i.memcpy1))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_at_receive
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_set
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[183]"></a>memcpyr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, utilities.o(i.memcpyr))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[c3]"></a>memset1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utilities.o(i.memset1))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[1fc]"></a>rand1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(i.rand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rand1 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[1a6]"></a>randr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, utilities.o(i.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>

<P><STRONG><a name="[1ba]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[1f8]"></a>send_exti</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.send_exti))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = send_exti &rArr; lora_send_exti &rArr; SendFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_exti
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>set_at_receive</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at.o(i.set_at_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_at_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRxData
</UL>

<P><STRONG><a name="[15c]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1d8]"></a>tiny_sscanf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, tiny_sscanf.o(i.tiny_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_set
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TDC_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>

<P><STRONG><a name="[1ff]"></a>tiny_vsnprintf_like</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, tiny_vsnprintf.o(i.tiny_vsnprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[189]"></a>vcom_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, vcom.o(i.vcom_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = vcom_IRQHandler &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Disable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>vcom_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, vcom.o(i.vcom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vcom_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>

<P><STRONG><a name="[12b]"></a>vcom_IoInit</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, vcom.o(i.vcom_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vcom_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[d9]"></a>vcom_ReceiveInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vcom.o(i.vcom_ReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vcom_ReceiveInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>

<P><STRONG><a name="[1b2]"></a>vcom_Send</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, vcom.o(i.vcom_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ReceiveBinary
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_get
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c3]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(i.GetFskBandwidthRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFskBandwidthRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[1b9]"></a>RxChainCalibration</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sx1276.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[123]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[bf]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[c0]"></a>ADC_Enable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[110]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[108]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[135]"></a>HW_GPIO_GetBitPos</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hw_gpio.o(i.HW_GPIO_GetBitPos))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>

<P><STRONG><a name="[13d]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_setMcuWakeUpTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
</UL>

<P><STRONG><a name="[140]"></a>HW_RTC_SetAlarmConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetAlarmConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_SetAlarmConfig &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
</UL>

<P><STRONG><a name="[13f]"></a>HW_RTC_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
</UL>

<P><STRONG><a name="[148]"></a>HW_RTC_StartWakeUpAlarm</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, hw_rtc.o(i.HW_RTC_StartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[f]"></a>LoraRxData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.LoraRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoraRxData &rArr; set_at_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_at_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>LoraTxData</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, main.o(i.LoraTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LoraTxData &rArr; HW_GetBatteryLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1db]"></a>print_16_02x</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, at.o(i.print_16_02x))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = print_16_02x &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_get
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_get
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_get
</UL>

<P><STRONG><a name="[1d7]"></a>print_8_02x</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, at.o(i.print_8_02x))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = print_8_02x &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_get
</UL>

<P><STRONG><a name="[1d5]"></a>print_d</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, at.o(i.print_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = print_d &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rssi_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_isack_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_get
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TDC_get
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_get
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_get
</UL>

<P><STRONG><a name="[1e5]"></a>print_u</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, at.o(i.print_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = print_u &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_snr_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_get
</UL>

<P><STRONG><a name="[1dc]"></a>sscanf_16_hhx</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, at.o(i.sscanf_16_hhx))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_set
</UL>

<P><STRONG><a name="[1e1]"></a>sscanf_uint32_as_hhx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, at.o(i.sscanf_uint32_as_hhx))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = sscanf_uint32_as_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_set
</UL>

<P><STRONG><a name="[1d4]"></a>translate_status</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at.o(i.translate_status))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_get
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_get
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_get
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Join
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_get
</UL>

<P><STRONG><a name="[dd]"></a>com_error</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, command.o(i.com_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = com_error &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>

<P><STRONG><a name="[de]"></a>parse_cmd</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, command.o(i.parse_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = parse_cmd &rArr; com_error &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[43]"></a>McpsConfirm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lora.o(i.McpsConfirm))
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.lora_fsm)
</UL>
<P><STRONG><a name="[44]"></a>McpsIndication</STRONG> (Thumb, 394 bytes, Stack size 64 bytes, lora.o(i.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = McpsIndication &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_comm_param
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.lora_fsm)
</UL>
<P><STRONG><a name="[45]"></a>MlmeConfirm</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lora.o(i.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MlmeConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.lora_fsm)
</UL>
<P><STRONG><a name="[46]"></a>OnTxNextPacketTimerEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.OnTxNextPacketTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OnTxNextPacketTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSendEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.lora_fsm)
</UL>
<P><STRONG><a name="[1f6]"></a>PrepareTxFrame</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lora.o(i.PrepareTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PrepareTxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_exti
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[1c5]"></a>SendFrame</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lora.o(i.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = SendFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_exti
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_fsm
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[177]"></a>set_comm_param</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lora.o(i.set_comm_param))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[1fe]"></a>tiny_vfscanf</STRONG> (Thumb, 592 bytes, Stack size 608 bytes, tiny_sscanf.o(i.tiny_vfscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>

<P><STRONG><a name="[1f3]"></a>ee_number</STRONG> (Thumb, 254 bytes, Stack size 120 bytes, tiny_vsnprintf.o(i.ee_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>

<P><STRONG><a name="[ca]"></a>AddMacCommand</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, loramac.o(i.AddMacCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AddMacCommand &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[df]"></a>CalculateBackOff</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, loramac.o(i.CalculateBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CalculateBackOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[3b]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loramac.o(i.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[37]"></a>OnMacStateCheckTimerEvent</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, loramac.o(i.OnMacStateCheckTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = OnMacStateCheckTimerEvent &rArr; OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3d]"></a>OnRadioRxDone</STRONG> (Thumb, 1224 bytes, Stack size 128 bytes, loramac.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = OnRadioRxDone &rArr; ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3e]"></a>OnRadioRxError</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, loramac.o(i.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OnRadioRxError &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[40]"></a>OnRadioRxTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, loramac.o(i.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OnRadioRxTimeout &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3c]"></a>OnRadioTxDone</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, loramac.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OnRadioTxDone &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3f]"></a>OnRadioTxTimeout</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, loramac.o(i.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OnRadioTxTimeout &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[39]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, loramac.o(i.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OnRxWindow1TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3a]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, loramac.o(i.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[38]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, loramac.o(i.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[182]"></a>ParseMacCommandsToRepeat</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, loramac.o(i.ParseMacCommandsToRepeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ParseMacCommandsToRepeat &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[17c]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, loramac.o(i.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrepareRxDoneAbort &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[17e]"></a>ProcessMacCommands</STRONG> (Thumb, 678 bytes, Stack size 80 bytes, loramac.o(i.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[158]"></a>ResetMacParameters</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, loramac.o(i.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[167]"></a>RxWindowSetup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramac.o(i.RxWindowSetup))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[17a]"></a>ScheduleTx</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, loramac.o(i.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionEU868TxConfig &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[171]"></a>ValidatePayloadLength</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, loramac.o(i.ValidatePayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ValidatePayloadLength &rArr; RegionGetPhyParam &rArr; RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
</UL>

<P><STRONG><a name="[e2]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, regioneu868.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[1a5]"></a>GetBandwidth</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, regioneu868.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[1a3]"></a>VerifyTxFreq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, regioneu868.o(i.VerifyTxFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>

<P><STRONG><a name="[1c8]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timeserver.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1c9]"></a>TimerSetTimeout</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[1d0]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1fa]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[1d1]"></a>mix_sub_columns</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1d3]"></a>shift_sub_rows</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1d2]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1cd]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1cc]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1cf]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ce]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
